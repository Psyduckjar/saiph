Many of these are half-baked ideas, to be investigated as much as implemented.

* Generalize pathfinding to generate arbitrary commands, not just directions.
  * Another good idea, tying in to item actions, is a tactical analyzer (to borrow a 523 term) that paths across water by fetching levitation boots.  I think the best way would be to accumulate water tiles in a queue and process them all (with triangle-inequality estimated distances) when a levitation item is determined to be reachable.
  * When Loot is interpreted as "having items just in case", a sensible implementation of bag use starts to suggest itself.

* Can bagging of gold be handled without redoing Loot?

* Don't melee nymphs, E when next to nymphs

* Kiting

* Figure out why saiphs rarely eat elves, fix it

* Try to track nutrition better, so we know when we can eat eyes

* More debug interfaces: display any level

* A TAEB-like item possibilities tracker?

* Understand whatever makes saiphs quit sokoban.  [It's the lack of any "go to sokoban" code]

* Make a branch to experiment with "item actions": Analyzers can say not just "go to a point and do something", but also "get an item and do something".  This simplifies Loot's job quite a bit, as it will only have to deal with items that some analyzer wants to keep in inventory "just in case", like unihorns.

* Situation patch stuff
  * Control flags like immortality_on
  * Levels: traps, hard_floor, no_monster_gen, knowledge maps.
  * Character: set spells.

* Handle inventory full conditions without looping.  If rawrmage won't, also handle Overloaded.
  * don't go up stairs Stressed, or walk around Stressed in general

* Look into implementing shopping
  - Xiella reports that pickaxe repickup malfunctions in Minetown

* Try to avoid backtracking to beatify a single elven leather helm or dagger or whatever

* Since saiph likes teleportation so much, she should kill tengu

* Loot boxes

* action::Loot is bogus, it will fail if there's a question up when ':' needs to be used

* Dispose of trolls

* Optimization: When MonsterInfo et al produce high-priority actions, don't take one, take them all and don't analyze until they're all done.
  - Also, mark some analyzers as "run this later in the cycle, and don't run it at all if there are 1000+ actions pending", or just have an earlyAnalyze method
  - do not remember mobs if the level is completely open
  - experiment with allowing inlining for trivial accessors

* sorph ate a mimic in a shop, probably because it was mimicing stairs down and overwrote SHOP_TILE
  - the right fix here is to make an in_shop bitfield, because it's not mutually exclusive with anything

* death ray mitigation strategies
  - buy and MR-test all cloaks
  - finish Sokoban
  - buy and strategically use magic lamps
  - fountain dipping!

* Don't visit ad aerarium closets unless we can teleport or dig.

* Flesh out "Roamer" ideas

* Experiment with a lastChance() / Saiph::canDig() way to handle digging and levitating over water.

* Queue:
  - Saiph::likesShields() and #twoweapon
  - PoGL / wraith corpse improvements
  - Medusa analyzer.

* 4/20 night results:
  - When there are E-ignoring monsters around, a good way to heal is to run away
  - Do not drop items which are (being w  (drop_armor_bug)
  - We should not be pathing over magic portals to get to points on the same level
